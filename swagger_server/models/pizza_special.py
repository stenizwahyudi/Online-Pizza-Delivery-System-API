# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PizzaSpecial(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pizza_specials_id: int=None, name: str=None, description: str=None, base_price: float=None, gluten_free: bool=None):  # noqa: E501
        """PizzaSpecial - a model defined in Swagger

        :param pizza_specials_id: The pizza_specials_id of this PizzaSpecial.  # noqa: E501
        :type pizza_specials_id: int
        :param name: The name of this PizzaSpecial.  # noqa: E501
        :type name: str
        :param description: The description of this PizzaSpecial.  # noqa: E501
        :type description: str
        :param base_price: The base_price of this PizzaSpecial.  # noqa: E501
        :type base_price: float
        :param gluten_free: The gluten_free of this PizzaSpecial.  # noqa: E501
        :type gluten_free: bool
        """
        self.swagger_types = {
            'pizza_specials_id': int,
            'name': str,
            'description': str,
            'base_price': float,
            'gluten_free': bool
        }

        self.attribute_map = {
            'pizza_specials_id': 'pizza_specials_id',
            'name': 'name',
            'description': 'description',
            'base_price': 'base_price',
            'gluten_free': 'gluten_free'
        }
        self._pizza_specials_id = pizza_specials_id
        self._name = name
        self._description = description
        self._base_price = base_price
        self._gluten_free = gluten_free

    @classmethod
    def from_dict(cls, dikt) -> 'PizzaSpecial':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PizzaSpecial of this PizzaSpecial.  # noqa: E501
        :rtype: PizzaSpecial
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pizza_specials_id(self) -> int:
        """Gets the pizza_specials_id of this PizzaSpecial.

        The id of a pizza special.   # noqa: E501

        :return: The pizza_specials_id of this PizzaSpecial.
        :rtype: int
        """
        return self._pizza_specials_id

    @pizza_specials_id.setter
    def pizza_specials_id(self, pizza_specials_id: int):
        """Sets the pizza_specials_id of this PizzaSpecial.

        The id of a pizza special.   # noqa: E501

        :param pizza_specials_id: The pizza_specials_id of this PizzaSpecial.
        :type pizza_specials_id: int
        """

        self._pizza_specials_id = pizza_specials_id

    @property
    def name(self) -> str:
        """Gets the name of this PizzaSpecial.

        The name of a pizza special.   # noqa: E501

        :return: The name of this PizzaSpecial.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PizzaSpecial.

        The name of a pizza special.   # noqa: E501

        :param name: The name of this PizzaSpecial.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this PizzaSpecial.

        The description of the pizza special, a general introduction to the product.   # noqa: E501

        :return: The description of this PizzaSpecial.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PizzaSpecial.

        The description of the pizza special, a general introduction to the product.   # noqa: E501

        :param description: The description of this PizzaSpecial.
        :type description: str
        """

        self._description = description

    @property
    def base_price(self) -> float:
        """Gets the base_price of this PizzaSpecial.

        The base price of the pizza special.   # noqa: E501

        :return: The base_price of this PizzaSpecial.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price: float):
        """Sets the base_price of this PizzaSpecial.

        The base price of the pizza special.   # noqa: E501

        :param base_price: The base_price of this PizzaSpecial.
        :type base_price: float
        """

        self._base_price = base_price

    @property
    def gluten_free(self) -> bool:
        """Gets the gluten_free of this PizzaSpecial.

        The boolean value to reflect if this pizza special is gluten free or not.   # noqa: E501

        :return: The gluten_free of this PizzaSpecial.
        :rtype: bool
        """
        return self._gluten_free

    @gluten_free.setter
    def gluten_free(self, gluten_free: bool):
        """Sets the gluten_free of this PizzaSpecial.

        The boolean value to reflect if this pizza special is gluten free or not.   # noqa: E501

        :param gluten_free: The gluten_free of this PizzaSpecial.
        :type gluten_free: bool
        """

        self._gluten_free = gluten_free
