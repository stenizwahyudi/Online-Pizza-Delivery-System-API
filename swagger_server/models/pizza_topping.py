# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PizzaTopping(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pizza_toppings_id: int=None, name: str=None, topping_price: float=None, gluten_free: bool=None):  # noqa: E501
        """PizzaTopping - a model defined in Swagger

        :param pizza_toppings_id: The pizza_toppings_id of this PizzaTopping.  # noqa: E501
        :type pizza_toppings_id: int
        :param name: The name of this PizzaTopping.  # noqa: E501
        :type name: str
        :param topping_price: The topping_price of this PizzaTopping.  # noqa: E501
        :type topping_price: float
        :param gluten_free: The gluten_free of this PizzaTopping.  # noqa: E501
        :type gluten_free: bool
        """
        self.swagger_types = {
            'pizza_toppings_id': int,
            'name': str,
            'topping_price': float,
            'gluten_free': bool
        }

        self.attribute_map = {
            'pizza_toppings_id': 'pizza_toppings_id',
            'name': 'name',
            'topping_price': 'topping_price',
            'gluten_free': 'gluten_free'
        }
        self._pizza_toppings_id = pizza_toppings_id
        self._name = name
        self._topping_price = topping_price
        self._gluten_free = gluten_free

    @classmethod
    def from_dict(cls, dikt) -> 'PizzaTopping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PizzaTopping of this PizzaTopping.  # noqa: E501
        :rtype: PizzaTopping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pizza_toppings_id(self) -> int:
        """Gets the pizza_toppings_id of this PizzaTopping.

        The Id of a pizza topping.   # noqa: E501

        :return: The pizza_toppings_id of this PizzaTopping.
        :rtype: int
        """
        return self._pizza_toppings_id

    @pizza_toppings_id.setter
    def pizza_toppings_id(self, pizza_toppings_id: int):
        """Sets the pizza_toppings_id of this PizzaTopping.

        The Id of a pizza topping.   # noqa: E501

        :param pizza_toppings_id: The pizza_toppings_id of this PizzaTopping.
        :type pizza_toppings_id: int
        """

        self._pizza_toppings_id = pizza_toppings_id

    @property
    def name(self) -> str:
        """Gets the name of this PizzaTopping.

        The name of a pizza topping.   # noqa: E501

        :return: The name of this PizzaTopping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PizzaTopping.

        The name of a pizza topping.   # noqa: E501

        :param name: The name of this PizzaTopping.
        :type name: str
        """

        self._name = name

    @property
    def topping_price(self) -> float:
        """Gets the topping_price of this PizzaTopping.

        The extra price on the order of a pizza topping.   # noqa: E501

        :return: The topping_price of this PizzaTopping.
        :rtype: float
        """
        return self._topping_price

    @topping_price.setter
    def topping_price(self, topping_price: float):
        """Sets the topping_price of this PizzaTopping.

        The extra price on the order of a pizza topping.   # noqa: E501

        :param topping_price: The topping_price of this PizzaTopping.
        :type topping_price: float
        """

        self._topping_price = topping_price

    @property
    def gluten_free(self) -> bool:
        """Gets the gluten_free of this PizzaTopping.

        The boolean value to reflect if a pizza topping is gluten free or not.   # noqa: E501

        :return: The gluten_free of this PizzaTopping.
        :rtype: bool
        """
        return self._gluten_free

    @gluten_free.setter
    def gluten_free(self, gluten_free: bool):
        """Sets the gluten_free of this PizzaTopping.

        The boolean value to reflect if a pizza topping is gluten free or not.   # noqa: E501

        :param gluten_free: The gluten_free of this PizzaTopping.
        :type gluten_free: bool
        """

        self._gluten_free = gluten_free
