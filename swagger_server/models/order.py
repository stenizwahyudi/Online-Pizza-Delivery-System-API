# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, orders_id: int=None, pizza_store_id: int=None, pizzas_id: List[int]=None, total_price: float=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param orders_id: The orders_id of this Order.  # noqa: E501
        :type orders_id: int
        :param pizza_store_id: The pizza_store_id of this Order.  # noqa: E501
        :type pizza_store_id: int
        :param pizzas_id: The pizzas_id of this Order.  # noqa: E501
        :type pizzas_id: List[int]
        :param total_price: The total_price of this Order.  # noqa: E501
        :type total_price: float
        """
        self.swagger_types = {
            'orders_id': int,
            'pizza_store_id': int,
            'pizzas_id': List[int],
            'total_price': float
        }

        self.attribute_map = {
            'orders_id': 'orders_id',
            'pizza_store_id': 'pizza_store_id',
            'pizzas_id': 'pizzas_id',
            'total_price': 'total_price'
        }
        self._orders_id = orders_id
        self._pizza_store_id = pizza_store_id
        self._pizzas_id = pizzas_id
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orders_id(self) -> int:
        """Gets the orders_id of this Order.

        The id of an order.   # noqa: E501

        :return: The orders_id of this Order.
        :rtype: int
        """
        return self._orders_id

    @orders_id.setter
    def orders_id(self, orders_id: int):
        """Sets the orders_id of this Order.

        The id of an order.   # noqa: E501

        :param orders_id: The orders_id of this Order.
        :type orders_id: int
        """

        self._orders_id = orders_id

    @property
    def pizza_store_id(self) -> int:
        """Gets the pizza_store_id of this Order.

        The id of a pizza store this order belongs to.   # noqa: E501

        :return: The pizza_store_id of this Order.
        :rtype: int
        """
        return self._pizza_store_id

    @pizza_store_id.setter
    def pizza_store_id(self, pizza_store_id: int):
        """Sets the pizza_store_id of this Order.

        The id of a pizza store this order belongs to.   # noqa: E501

        :param pizza_store_id: The pizza_store_id of this Order.
        :type pizza_store_id: int
        """

        self._pizza_store_id = pizza_store_id

    @property
    def pizzas_id(self) -> List[int]:
        """Gets the pizzas_id of this Order.

        The IDs of customized pizzas that this order includes.   # noqa: E501

        :return: The pizzas_id of this Order.
        :rtype: List[int]
        """
        return self._pizzas_id

    @pizzas_id.setter
    def pizzas_id(self, pizzas_id: List[int]):
        """Sets the pizzas_id of this Order.

        The IDs of customized pizzas that this order includes.   # noqa: E501

        :param pizzas_id: The pizzas_id of this Order.
        :type pizzas_id: List[int]
        """

        self._pizzas_id = pizzas_id

    @property
    def total_price(self) -> float:
        """Gets the total_price of this Order.

        The total price for this order, which is the sum of the price of the customized pizzs within this order. This price is a pretax price.   # noqa: E501

        :return: The total_price of this Order.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price: float):
        """Sets the total_price of this Order.

        The total price for this order, which is the sum of the price of the customized pizzs within this order. This price is a pretax price.   # noqa: E501

        :param total_price: The total_price of this Order.
        :type total_price: float
        """

        self._total_price = total_price
