# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Pizza(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pizzas_id: int=None, pizza_special_id: int=None, pizza_toppings_id: List[int]=None, pizza_size_id: int=None, count: int=None, total_price: float=None):  # noqa: E501
        """Pizza - a model defined in Swagger

        :param pizzas_id: The pizzas_id of this Pizza.  # noqa: E501
        :type pizzas_id: int
        :param pizza_special_id: The pizza_special_id of this Pizza.  # noqa: E501
        :type pizza_special_id: int
        :param pizza_toppings_id: The pizza_toppings_id of this Pizza.  # noqa: E501
        :type pizza_toppings_id: List[int]
        :param pizza_size_id: The pizza_size_id of this Pizza.  # noqa: E501
        :type pizza_size_id: int
        :param count: The count of this Pizza.  # noqa: E501
        :type count: int
        :param total_price: The total_price of this Pizza.  # noqa: E501
        :type total_price: float
        """
        self.swagger_types = {
            'pizzas_id': int,
            'pizza_special_id': int,
            'pizza_toppings_id': List[int],
            'pizza_size_id': int,
            'count': int,
            'total_price': float
        }

        self.attribute_map = {
            'pizzas_id': 'pizzas_id',
            'pizza_special_id': 'pizza_special_id',
            'pizza_toppings_id': 'pizza_toppings_id',
            'pizza_size_id': 'pizza_size_id',
            'count': 'count',
            'total_price': 'total_price'
        }
        self._pizzas_id = pizzas_id
        self._pizza_special_id = pizza_special_id
        self._pizza_toppings_id = pizza_toppings_id
        self._pizza_size_id = pizza_size_id
        self._count = count
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt) -> 'Pizza':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pizza of this Pizza.  # noqa: E501
        :rtype: Pizza
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pizzas_id(self) -> int:
        """Gets the pizzas_id of this Pizza.

        The id of a customized pizza in an order.   # noqa: E501

        :return: The pizzas_id of this Pizza.
        :rtype: int
        """
        return self._pizzas_id

    @pizzas_id.setter
    def pizzas_id(self, pizzas_id: int):
        """Sets the pizzas_id of this Pizza.

        The id of a customized pizza in an order.   # noqa: E501

        :param pizzas_id: The pizzas_id of this Pizza.
        :type pizzas_id: int
        """

        self._pizzas_id = pizzas_id

    @property
    def pizza_special_id(self) -> int:
        """Gets the pizza_special_id of this Pizza.

        The id of the pizza special that this customized pizza created upon.   # noqa: E501

        :return: The pizza_special_id of this Pizza.
        :rtype: int
        """
        return self._pizza_special_id

    @pizza_special_id.setter
    def pizza_special_id(self, pizza_special_id: int):
        """Sets the pizza_special_id of this Pizza.

        The id of the pizza special that this customized pizza created upon.   # noqa: E501

        :param pizza_special_id: The pizza_special_id of this Pizza.
        :type pizza_special_id: int
        """

        self._pizza_special_id = pizza_special_id

    @property
    def pizza_toppings_id(self) -> List[int]:
        """Gets the pizza_toppings_id of this Pizza.

        The IDs of pizza toppings that this customized pizza created with.   # noqa: E501

        :return: The pizza_toppings_id of this Pizza.
        :rtype: List[int]
        """
        return self._pizza_toppings_id

    @pizza_toppings_id.setter
    def pizza_toppings_id(self, pizza_toppings_id: List[int]):
        """Sets the pizza_toppings_id of this Pizza.

        The IDs of pizza toppings that this customized pizza created with.   # noqa: E501

        :param pizza_toppings_id: The pizza_toppings_id of this Pizza.
        :type pizza_toppings_id: List[int]
        """

        self._pizza_toppings_id = pizza_toppings_id

    @property
    def pizza_size_id(self) -> int:
        """Gets the pizza_size_id of this Pizza.

        The id of the pizza size of the customized pizza.   # noqa: E501

        :return: The pizza_size_id of this Pizza.
        :rtype: int
        """
        return self._pizza_size_id

    @pizza_size_id.setter
    def pizza_size_id(self, pizza_size_id: int):
        """Sets the pizza_size_id of this Pizza.

        The id of the pizza size of the customized pizza.   # noqa: E501

        :param pizza_size_id: The pizza_size_id of this Pizza.
        :type pizza_size_id: int
        """

        self._pizza_size_id = pizza_size_id

    @property
    def count(self) -> int:
        """Gets the count of this Pizza.

        The count of this customized pizza in an order.   # noqa: E501

        :return: The count of this Pizza.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this Pizza.

        The count of this customized pizza in an order.   # noqa: E501

        :param count: The count of this Pizza.
        :type count: int
        """

        self._count = count

    @property
    def total_price(self) -> float:
        """Gets the total_price of this Pizza.

        The total price of this customized pizza in an order, which is the single price of this customized pizza * count.   # noqa: E501

        :return: The total_price of this Pizza.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price: float):
        """Sets the total_price of this Pizza.

        The total price of this customized pizza in an order, which is the single price of this customized pizza * count.   # noqa: E501

        :param total_price: The total_price of this Pizza.
        :type total_price: float
        """

        self._total_price = total_price
